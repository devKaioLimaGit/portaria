<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gerar Portaria</title>
  <script src="https://unpkg.com/docx@7.1.0/build/index.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.js"></script>
  <link rel="stylesheet" href="/css/style.css" />
</head>
<body>
  <div class="container">
    <!-- Formulário -->
    <div class="form-container">
      <h2>Dados da Nomeação</h2>
      <form id="formulario">
        <label for="nome">Nome:</label>
        <input type="text" id="nome" required />

        <label for="portaria">Portaria:</label>
        <input type="text" id="portaria" placeholder="Ex: 1272" required />

        <label for="cpf">CPF:</label>
        <input type="text" id="cpf" placeholder="000.000.000-00" maxlength="14" required />

        <label for="cargo">Cargo:</label>
        <input type="text" id="cargo" placeholder="Ex: Assessor III" required />

        <label for="simbolo">Símbolo:</label>
        <input type="text" id="simbolo" placeholder="Ex: CC8" required />

        <label for="secretaria">Secretaria:</label>
        <input type="text" id="secretaria" placeholder="Ex: Secretaria de Educação" required />

        <label for="data-1">Data (Rodapé):</label>
        <input type="date" id="data-1" required />

        <label for="data-nomeacao">Data (Nomeação):</label>
        <input type="date" id="data-nomeacao" name="data-nomeacao" required />

        <button type="button" onclick="enviarPortaria()">Baixar DOCX da Prévia</button>
      </form>
    </div>

    <!-- Prévia -->
    <div class="preview-container" id="preview">
      <img src="/img/pref.png" alt="Logo da Prefeitura" class="logo-prefeitura" />

      <p class="center titulo-gabinete"><strong><u>SECRETARIA DE GOVERNO E GABINETE</u></strong></p>
      <p class="center"><strong>PORTARIA Nº <span id="p-portaria">0000</span>/2025</strong></p>

      <p>
        <strong>         O PREFEITO DO MUNICÍPIO DO PAULISTA – ESTADO DE PERNAMBUCO </strong>,
        no uso das atribuições institucionais que lhe são conferidas em função do cargo e com amparo nos
        preceitos contidos na Lei Orgânica do Município,
      </p>

      <p class="center"><strong>R E S O L V E:</strong></p>

      <p>
        <strong>         NOMEAR</strong> o(a) Sr(a). <strong><span id="p-nome">NOME COMPLETO</span></strong>
        sob o CPF nº <span id="p-cpf">xxx.xxx.xxx-xx</span>, para o exercício do cargo de provimento em comissão de
        <strong><span id="p-cargo">CARGO</span></strong>, símbolo “<strong><span id="p-simbolo">CC8</span></strong>”,
        lotado na <strong><span id="p-secretaria">SECRETARIA</span></strong>,
        a partir da presente data <span id="p-data-nomeacao">01/01/2025</span>.
      </p>

      <p class="center">Registra-se</p>
      <p class="center">Publique-se</p>
      <p class="center" id="p-data">Paulista, DATA ATUAL</p>

      <p class="center">
        <strong>SEVERINO RAMOS DE SANTANA<br /><br />Prefeito</strong>
      </p>

      <div class="rodape">
        <hr />
        <p class="rodape-texto">
          Praça Agamenon Magalhães, s/nº - Centro – Paulista – PE<br />
          CNPJ: 10.408.839/0001-17
        </p>
      </div>
    </div>
  </div>

  <script>
    async function enviarPortaria() {
      const formData = {
        nome: document.getElementById('nome').value,
        portaria: document.getElementById('portaria').value,
        cpf: document.getElementById('cpf').value.replace(/\D/g, ''),
        cargo: document.getElementById('cargo').value,
        simbolo: document.getElementById('simbolo').value,
        secretaria: document.getElementById('secretaria').value,
        data: document.getElementById('data-1').value,
        dataNomeacao: document.getElementById('data-nomeacao').value,
      };

      try {
        console.log(JSON.stringify(formData))
        const response = await fetch('/portaria', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Erro ao enviar portaria');
        }

        const result = await response.json();
        alert('Portaria criada com sucesso!');
        console.log('Resposta do servidor:', result);
        gerarDocx();
      } catch (error) {
        console.error('Erro ao enviar portaria:', error);
        alert('Erro ao criar portaria: ' + error.message);
      }
    }

    function mascararCPF(cpf) {
      cpf = cpf.replace(/\D/g, '');
      if (cpf.length !== 11) return 'CPF INVÁLIDO';
      return cpf.replace(/^(\d{3})(\d{3})(\d{3})(\d{2})$/, 'xxx.$2.xxx-$4');
    }

    function formatarDataNomeacao(dataInput) {
      if (!dataInput) return 'DATA INVÁLIDA';
      const [ano, mes, dia] = dataInput.split('-');
      const meses = [
        'janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho',
        'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'
      ];
      const mesNome = meses[parseInt(mes) - 1];
      return `${dia} de ${mesNome} de ${ano}`;
    }

    function atualizarDataPrevia(dataInput) {
      if (!dataInput) return;
      const [ano, mes, dia] = dataInput.split('-');
      const meses = [
        'janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho',
        'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'
      ];
      const mesNome = meses[parseInt(mes) - 1];
      document.getElementById('p-data').textContent = `Paulista, ${dia} de ${mesNome} de ${ano}`;
    }

    window.addEventListener('DOMContentLoaded', () => {
      const inputData = document.getElementById('data-1');
      const inputDataNomeacao = document.getElementById('data-nomeacao');
      // Inicializa com campos vazios
      inputData.value = '';
      inputDataNomeacao.value = '';
      document.getElementById('p-data').textContent = 'Paulista, DATA ATUAL';
      document.getElementById('p-data-nomeacao').textContent = '01/01/2025';
    });

    const campos = ['nome', 'cpf', 'cargo', 'simbolo', 'secretaria', 'portaria', 'data-1', 'data-nomeacao'];
    campos.forEach((id) => {
      document.getElementById(id).addEventListener('input', function () {
        const valor = this.value || id.toUpperCase();
        if (id === 'cpf') {
          document.getElementById('p-cpf').textContent = mascararCPF(valor);
        } else if (id === 'data-1') {
          atualizarDataPrevia(valor);
        } else if (id === 'data-nomeacao') {
          document.getElementById('p-data-nomeacao').textContent = formatarDataNomeacao(valor);
        } else {
          document.getElementById('p-' + id).textContent = valor;
        }
      });
    });

    async function gerarDocx() {
      const { Document, Packer, Paragraph, TextRun, AlignmentType, ImageRun, Border, Table, TableRow, TableCell, WidthType, Footer } = docx;

      const nome = document.getElementById('nome').value || 'documento';
      const portaria = document.getElementById('p-portaria').textContent;
      const cpf = document.getElementById('p-cpf').textContent;
      const cargo = document.getElementById('p-cargo').textContent;
      const simbolo = document.getElementById('p-simbolo').textContent;
      const secretaria = document.getElementById('p-secretaria').textContent;
      const data = document.getElementById('p-data').textContent;
      const dataNomeacao = document.getElementById('p-data-nomeacao').textContent;

      const topMargin = 3 * 567;
      const leftMargin = 3 * 567;
      const bottomMargin = 2 * 567;
      const rightMargin = 2 * 567;

      async function getImageArrayBuffer(url) {
        try {
          const response = await fetch(url);
          if (!response.ok) throw new Error('Failed to fetch image');
          return await response.arrayBuffer();
        } catch (error) {
          console.warn('Image fetch failed, skipping logo:', error);
          return null;
        }
      }

      const imageBuffer = await getImageArrayBuffer('/img/pref.png');

      const doc = new Document({
        sections: [{
          properties: {
            page: {
              size: {
                width: 595.3 * 20,
                height: 841.9 * 20,
              },
              margin: {
                top: topMargin,
                bottom: bottomMargin,
                left: leftMargin,
                right: rightMargin,
              },
            },
          },
          footers: {
            default: new Footer({
              children: [
                new Table({
                  rows: [
                    new TableRow({
                      children: [
                        new TableCell({
                          children: [],
                          borders: {
                            top: { style: Border.SINGLE, size: 4, color: '000000' },
                            bottom: { style: Border.NIL },
                            left: { style: Border.NIL },
                            right: { style: Border.NIL },
                          },
                        }),
                      ],
                    }),
                  ],
                  width: {
                    size: 100,
                    type: WidthType.PERCENTAGE,
                  },
                }),
                new Paragraph({
                  alignment: AlignmentType.CENTER,
                  children: [
                    new TextRun({
                      text: "Praça Agamenon Magalhães, s/nº - Centro – Paulista – PE",
                      font: { name: 'Times New Roman' },
                      size: 20,
                    }),
                  ],
                  spacing: { after: 50 },
                }),
                new Paragraph({
                  alignment: AlignmentType.CENTER,
                  children: [
                    new TextRun({
                      text: "CNPJ: 10.408.839/0001-17",
                      font: { name: 'Times New Roman' },
                      size: 20,
                    }),
                  ],
                }),
              ],
            }),
          },
          children: [
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                imageBuffer ? new ImageRun({
                  data: imageBuffer,
                  transformation: {
                    width: 100,
                    height: 100,
                  },
                }) : new TextRun({ text: "" }),
              ],
              spacing: { after: 200 },
            }),
            new Paragraph({}),
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  text: "SECRETARIA DE GOVERNO E GABINETE",
                  bold: true,
                  underline: { type: 'single' },
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
              ],
              spacing: { after: 200 },
            }),
            new Paragraph({}),
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  text: `PORTARIA Nº ${portaria}/2025`,
                  bold: true,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
              ],
              spacing: { after: 200 },
            }),
            new Paragraph({}),
            new Paragraph({
              alignment: AlignmentType.JUSTIFIED,
              indent: { left: 720 },
              children: [
                new TextRun({
                  text: "\tO PREFEITO DO MUNICÍPIO DO PAULISTA – ESTADO DE PERNAMBUCO ",
                  bold: true,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
                new TextRun({
                  text: "no uso das atribuições institucionais que lhe são conferidas em função do cargo e com amparo nos preceitos contidos na Lei Orgânica do Município,",
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
              ],
              spacing: { after: 200 },
            }),
            new Paragraph({}),
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  text: "R E S O L V E:",
                  bold: true,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
              ],
              spacing: { after: 200 },
            }),
            new Paragraph({}),
            new Paragraph({
              alignment: AlignmentType.JUSTIFIED,
              indent: { left: 720 },
              children: [
                new TextRun({
                  text: "\tNOMEAR ",
                  bold: true,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
                new TextRun({
                  text: `o(a) Sr(a). `,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
                new TextRun({
                  text: nome.toUpperCase(),
                  bold: true,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
                new TextRun({
                  text: ` sob o CPF nº ${cpf}, para o exercício do cargo de provimento em comissão de `,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
                new TextRun({
                  text: cargo.toUpperCase(),
                  bold: true,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
                new TextRun({
                  text: `, símbolo “`,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
                new TextRun({
                  text: simbolo,
                  bold: true,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
                new TextRun({
                  text: `”, lotado na `,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
                new TextRun({
                  text: secretaria.toUpperCase(),
                  bold: true,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
                new TextRun({
                  text: `, a partir da presente data ${dataNomeacao}.`,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
              ],
              spacing: { after: 200 },
            }),
            new Paragraph({}),
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  text: "Registra-se",
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
              ],
              spacing: { after: 100 },
            }),
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  text: "Publique-se",
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
              ],
              spacing: { after: 100 },
            }),
            new Paragraph({}),
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  text: data,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
              ],
              spacing: { after: 200 },
            }),
            new Paragraph({}),
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  text: "SEVERINO RAMOS DE SANTANA",
                  bold: true,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
              ],
              spacing: { after: 100 },
            }),
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  text: "Prefeito",
                  bold: true,
                  font: { name: 'Times New Roman' },
                  size: 20,
                }),
              ],
              spacing: { after: 200 },
            }),
          ],
        }],
      });

      Packer.toBlob(doc).then((blob) => {
        saveAs(blob, `portaria_${nome.replace(/\s+/g, '_').toLowerCase()}.docx`);
      }).catch((error) => {
        console.error('Erro ao gerar o documento Word:', error);
        alert('Erro ao gerar o documento Word: ' + error.message);
      });
    }
  </script>
</body>
</html>